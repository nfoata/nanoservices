'use strict';

// Step I.5: Check if the client will accept application/json mimetype    If accept field is undefined, we will say ok      application/* *.* 
// https://www.youtube.com/watch?v=Byhg9BBsbJw&t=1224s
// https://www.youtube.com/watch?v=TowcW1aTDqE

const doc = require('dynamodb-doc');
const dynamoDB = new doc.DynamoDB();

exports.handler = (event, context, callback) => {
  
    console.log("Step 1: Constant declarations");
    
    const COMPANY_NAME="anyasas";
    console.log("Step 1.1: Company name => " + COMPANY_NAME)
    
    const SERVICE_NAME="hardwares";
    console.log("Step 1.2: Service name => " + SERVICE_NAME)
    
    const DYNAMO_TABLE="hardwares"; 
    console.log("Step 1.3: Table used => " + DYNAMO_TABLE);
    
    const HELP_LINK = "http://documentations.anyasas.com/v1/" + SERVICE_NAME ;
    console.log("Step 1.4: Help link => " + HELP_LINK);
    
    const TENANT_PATTERN = "^[A-z0-9_]+$";
    console.log("Step 1.5: Tenant pattern => " + TENANT_PATTERN);
    
    const LOG_PATTERN = "^[ A-z0-9_%;,:!/><'*\-=#\\\\]+$";
    console.log("Step 1.6: Log pattern => " + LOG_PATTERN);
    
    const ID_PATTERN = "^[A-z0-9_]+$";
    console.log("Step 1.7: Id pattern => " + ID_PATTERN);
    
    console.log("Step 1.8: Preload message template")
    const httpAnswer = {
        statusCode: 599, 
        body: '',
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
        }
    }
    
    console.log("Step 1.9: Preload all possible message values");
    const MESSAGES = {
        GET_OK: { 
            HTTP_CODE: 200,
            HEADER_CODE: 200,
            HEADER_TEXT: "Item has been read",
            CONSOL_TEXT: "Item has been read"
        },
        GET_KO: {  
            HTTP_CODE: 400,
            HEADER_CODE: 430,
            HEADER_TEXT: "The Dynamo DB answer gives back an error object",
            CONSOL_TEXT: "The Dynamo DB answer gives back an error object"
        },
        GET_KO2: {  
            HTTP_CODE: 400,
            HEADER_CODE: 431,
            HEADER_TEXT: "The Dynamo DB answer does not give back a result object",
            CONSOL_TEXT: "The Dynamo DB answer does not give back a result object"
        },
        GET_KO3: {  
            HTTP_CODE: 404,
            HEADER_CODE: 432,
            HEADER_TEXT: "The Dynamo DB answer does not give back res.Item",
            CONSOL_TEXT: "The Dynamo DB answer does not give back res.Item"
        },
        ERROR_ON_EVENT: {
            HTTP_CODE: 422,
            HEADER_CODE: 433,
            HEADER_TEXT: "None lambda event has been detected",
            CONSOL_TEXT: "None lambda event has been detected"
        },
        ERROR_ON_HEADERS: {
            HTTP_CODE: 422,
            HEADER_CODE: 434,
            HEADER_TEXT: "Header parameters are mandatory",
            CONSOL_TEXT: "Header parameters are mandatory"
        },
        ERROR_ON_ACCEPT: {
            HTTP_CODE: 422,
            HEADER_CODE: 435,
            HEADER_TEXT: "Header parameter Accept is mandatory and must be: application/json",
            CONSOL_TEXT: "Header parameter Accept is mandatory and must be: application/json"
        },
        ERROR_ON_TENANT: {
            HTTP_CODE: 422,
            HEADER_CODE: 436,
            HEADER_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' parameter is mandatory",
            CONSOL_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' parameter is mandatory"
        },
        ERROR_ON_TENANT_STRING: {
            HTTP_CODE: 422,
            HEADER_CODE: 437,
            HEADER_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' parameter is not a string or empty",
            CONSOL_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' parameter is not a string or empty"
        },
        ERROR_ON_TENANT_MAXSIZE: {
            HTTP_CODE: 422,
            HEADER_CODE: 438,
            HEADER_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' parameter is too long ( > 255)",
            CONSOL_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' parameter is too long ( > 255)"
        },
        ERROR_ON_TENANT_FORMAT: {
            HTTP_CODE: 422,
            HEADER_CODE: 439,
            HEADER_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' does not followed the pattern " + TENANT_PATTERN,
            CONSOL_TEXT: "Header parameter named 'tenant' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant' does not followed the pattern " + TENANT_PATTERN
        },
        ERROR_ON_LOG_STRING: {
            HTTP_CODE: 422,
            HEADER_CODE: 440,
            HEADER_TEXT: "Header parameter named 'log' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log' parameter is not a string or empty",
            CONSOL_TEXT: "Header parameter named 'log' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log' parameter is not a string or empty"
        },
        ERROR_ON_LOG_MAXSIZE: {
            HTTP_CODE: 422,
            HEADER_CODE: 441,
            HEADER_TEXT: "Header parameter named 'log' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log' parameter is too long ( > 255)",
            CONSOL_TEXT: "Header parameter named 'log' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log' parameter is too long ( > 255)"
        },
        ERROR_ON_LOG_FORMAT: {
            HTTP_CODE: 422,
            HEADER_CODE: 442,
            HEADER_TEXT: "Header parameter named 'log' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log' does not followed the pattern " + LOG_PATTERN,
            CONSOL_TEXT: "Header parameter named 'log' - 'x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log' does not followed the pattern " + LOG_PATTERN
        },
        ERROR_ON_CONTEXT: {
            HTTP_CODE: 405,
            HEADER_CODE: 443,
            HEADER_TEXT: "None lambda event context has been detected",
            CONSOL_TEXT: "None lambda event context has been detected"
        },
        ERROR_ON_VERB: {
            HTTP_CODE: 405,
            HEADER_CODE: 444,
            HEADER_TEXT: "HTTP verb is not valid (authorized: POST, GET, PUT, PATCH, DELETE)",
            CONSOL_TEXT: "HTTP verb is not valid (authorized: POST, GET, PUT, PATCH, DELETE)" + event.httpMethod + "' has been detected instead."
        },
        ERROR_ON_PATH: {
            HTTP_CODE: 422,
            HEADER_CODE: 445,
            HEADER_TEXT: "Path parameters are not defined",
            CONSOL_TEXT: "Path parameters are not defined"
        },
        ERROR_ON_PATH_ID: {
            HTTP_CODE: 422,
            HEADER_CODE: 446,
            HEADER_TEXT: "Path id parameters is not defined",
            CONSOL_TEXT: "Path id parameters is not defined"
        },
        ERROR_ON_PATH_ID_STRING: {
            HTTP_CODE: 422,
            HEADER_CODE: 447,
            HEADER_TEXT: "Path id parameter is not a string or is an empty string",
            CONSOL_TEXT: "Path id parameter is not a string or is an empty string"
        },
        ERROR_ON_PATH_ID_MAXSIZE: {
            HTTP_CODE: 422,
            HEADER_CODE: 448,
            HEADER_TEXT: "Path id parameter is a too long string (>255)",
            CONSOL_TEXT: "Path id parameter is a too long string (>255)"
        },
        ERROR_ON_PATH_ID_FORMAT: {
            HTTP_CODE: 422,
            HEADER_CODE: 449,
            HEADER_TEXT: "Identifier does not followed the pattern " + ID_PATTERN,
            CONSOL_TEXT: "Identifier does not followed the pattern " + ID_PATTERN
        }
    }
  
    console.log("Step 2: Function declarations")
  
    console.log("Step 2.1: Load function for updating the Http message content")
    function updateHttpAnswer( statusCode, headerStatusCode, headerStatusMessage, body) {
        httpAnswer.statusCode = statusCode;
        httpAnswer.headers['x-' + COMPANY_NAME + '-' + SERVICE_NAME + '-code']      = headerStatusCode;
        httpAnswer.headers['x-' + COMPANY_NAME + '-' + SERVICE_NAME + '-message']   = headerStatusMessage;
        httpAnswer.headers['x-' + COMPANY_NAME + '-' + SERVICE_NAME + '-timeStamp'] = new Date(new Date().toUTCString()).toISOString(); 
        httpAnswer.body = body;
    }
    
    console.log("Step 2.2: Load function for building the Http message according the context");
    function message( message , isError = true , body = null) {
        isError ? console.error( message.CONSOL_TEXT ) : console.log( message.CONSOL_TEXT );
        var errorBody = {
            error: message.CONSOL_TEXT,
            help: HELP_LINK
        }
        updateHttpAnswer( message.HTTP_CODE , message.HEADER_CODE , message.HEADER_TEXT , isError ? JSON.stringify(errorBody) : JSON.stringify(body) );
        callback( null , httpAnswer );
    }
    
    console.log("Step 2.3: Load the callback function for analysing the dynamo table result and redirect to the correct http messsage");
    function myCallbackForGet( err , res ) {
        console.log( "Step 3.16: Check if Dynamo DB does not send an error" );
        if( err ) { message( MESSAGES.GET_KO ); return ; }
        
        console.log( "Step 3.17: Check if the Dynamo DB result object is defined" );
        if( res === undefined ) { message( MESSAGES.GET_KO2 ); return ; }
        
        console.log( "Step 3.18: Check if the Dynamo DB result object has the mandatory Item attribute" );
        if( res.Item === undefined ) { message( MESSAGES.GET_KO3 );  return ; }
        
        console.log( "Step 3.19: Retrieve the Item attribute" );
        var jsonGetObject = res.Item;
        
        console.log( "Step 3.20: Remove the tenant attribute" );
        jsonGetObject.tenant = undefined;
        
        console.log( "Step 3.21: Send the result object to the customer");
        message( MESSAGES.GET_OK , false , jsonGetObject); 
    }   
    
    console.log("Step 2.4: Load function for checking JSON");
    function isJSON(s) { 
        try { JSON.parse(s); return true; } catch (e) { return false; } 
    }

    console.log( "Step 3: Start processing" );
    
    console.log( "Step 3.1: Check if event parameters are defined (mandatory)" );
    if( event === undefined ) { message( MESSAGES.ERROR_ON_EVENT ); return; }
    
    console.log( "Step 3.2: Check if header parameters are defined (mandatory)" );
    if( event.headers === undefined ) { message( MESSAGES.ERROR_ON_HEADERS ); return; }
    
    console.log( "Step 3.3: Check if the header parameter Accept is application/json" );
    if( event.headers[ "Accept" ] === undefined || (event.headers[ "Accept" ] != 'application/json' && event.headers[ "Accept" ] != 'application/*' && event.headers[ "Accept" ] != '*/*') ) { message( MESSAGES.ERROR_ON_ACCEPT ); return; }
    
    console.log( "Step 3.4: Check if tenant header parameter is defined (mandatory)" );
    if( event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant" ] === undefined ) { message( MESSAGES.ERROR_ON_TENANT ); return; } 
    
    console.log( "Step 3.5: Check if tenant header parameter is not an empty string" );
    if ( typeof event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant" ] != 'string' && event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant" ].trim().length < 1) { message( MESSAGES.ERROR_ON_TENANT_STRING ); return; }        
    
    console.log( "Step 3.6: Check if tenant header parameter is not a too long string; Size detected " + event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant" ].trim().length );
    if ( event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant" ].trim().length > 255 ) { message( MESSAGES.ERROR_ON_TENANT_MAXSIZE ); return; }
    
    var tenant = event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant" ].trim();
    httpAnswer.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-tenant" ] = tenant;
    console.log( "Step 3.7: Retrieve the tenant and store it. Tenant is '" + tenant + "'." );
    
    console.log( "Step 3.8: Check if the tenant parameter followed the regex " + TENANT_PATTERN );
    if( !tenant.match(TENANT_PATTERN) ) { message( MESSAGES.ERROR_ON_TENANT_FORMAT ) ; return; }
 
    console.log( "Step 3.8: Check if log/tracer header parameter is defined (optional)" );
    if( event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log" ] !== undefined ) {
        
        console.log( "Step 3.8.A: Check if log/tracer header parameter is not an empty string" );
        if ( typeof event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log" ] != 'string' && event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log" ].trim().length < 1) { message( MESSAGES.ERROR_ON_LOG_STRING ); return; }    
        
        console.log( "Step 3.8.B: Check if log/tracer header parameter is not a too long string. Size detected " +event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log" ].trim().length );
        if ( event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log" ].trim().length > 255 ) { message( MESSAGES.ERROR_ON_LOG_MAXSIZE ); return; }
        
        console.log( "Step 3.8.C: Check if log/tracer header parameter followed the pattern " + LOG_PATTERN );
        var log = event.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log" ].trim();
        if( !log.match(LOG_PATTERN) ) { message( MESSAGES.ERROR_ON_LOG_FORMAT ); return; }
        
        httpAnswer.headers[ "x-" + COMPANY_NAME + '-' + SERVICE_NAME + "-log" ] = log;
        console.log( "Step 3.8.D: Retrieve the log/tracer and store it. Log is '" + log + "'." );
    }

    console.log( "Step 3.9: Check if the HTTP verb is defined" );
    if( event.httpMethod === undefined ) { message( MESSAGES.ERROR_ON_CONTEXT ); return; }
    
    console.log( "Step 3.10: Check if the HTTP verb is well GET" );
    if( event.httpMethod != 'GET' ) { message( MESSAGES.ERROR_ON_VERB ); return; }

    console.log( "Step 3.11: Check if path parameters are defined" );
    if( event.pathParameters === undefined ) { message( MESSAGES.ERROR_ON_PATH ); return; }
    
    console.log( "Step 3.12: Check if mandatory id path parameter is well defined" );
    if( event.pathParameters.id === undefined ) { message( MESSAGES.ERROR_ON_PATH_ID ); return; }
    
    console.log( "Step 3.13: Check if mandatory id path parameter is a string and not empty" );    
    if ( typeof event.pathParameters.id !== 'string' || event.pathParameters.id.trim().length < 1) { message( MESSAGES.ERROR_ON_PATH_ID_STRING ); return; }
                
    console.log( "Step 3.14: Check if mandatory id path parameter is not too long ( > 255 ). Size detected => " + event.pathParameters.id.trim().length );
    if ( event.pathParameters.id.trim().length > 255 ) { message( MESSAGES.ERROR_ON_PATH_ID_MAXSIZE ); return; }

    var identifier = event.pathParameters.id.trim();
    console.log( "Step 3.15: Check the identifier format with the regex " + ID_PATTERN  );
    if( !tenant.match(ID_PATTERN) ) { message( MESSAGES.ERROR_ON_ID_FORMAT ) ; return; }

    console.log( "Step 3.15: Prepare the request" );    
    var request = {
        TableName: DYNAMO_TABLE,
        Key: {
            "tenant": tenant,
            "id": identifier
        }
    };
     
    console.log( "Step 3.16: Launch the request: " + JSON.stringify(request) );
    dynamoDB.getItem( request , myCallbackForGet );
    //httpAnswer.body = JSON.stringify( event );
    //callback( null, httpAnswer );
};
